{"data": {"question": {"questionId": "179", "titleSlug": "largest-number", "title": "Largest Number", "topicTags": [{"name": "Array"}, {"name": "String"}, {"name": "Greedy"}, {"name": "Sorting"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    string largestNumber(vector<int>& nums) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public String largestNumber(int[] nums) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def largestNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: str\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        "}, {"langSlug": "c", "code": "char* largestNumber(int* nums, int numsSize) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public string LargestNumber(int[] nums) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {string}\n */\nvar largestNumber = function(nums) {\n    \n};"}, {"langSlug": "typescript", "code": "function largestNumber(nums: number[]): string {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return String\n     */\n    function largestNumber($nums) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func largestNumber(_ nums: [Int]) -> String {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun largestNumber(nums: IntArray): String {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  String largestNumber(List<int> nums) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func largestNumber(nums []int) string {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {String}\ndef largest_number(nums)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def largestNumber(nums: Array[Int]): String = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn largest_number(nums: Vec<i32>) -> String {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (largest-number nums)\n  (-> (listof exact-integer?) string?)\n  )"}, {"langSlug": "erlang", "code": "-spec largest_number(Nums :: [integer()]) -> unicode:unicode_binary().\nlargest_number(Nums) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec largest_number(nums :: [integer]) :: String.t\n  def largest_number(nums) do\n    \n  end\nend"}], "difficulty": "Medium", "content": "<p>Given a list of non-negative integers <code>nums</code>, arrange them such that they form the largest number and return it.</p>\n\n<p>Since the result may be very large, so you need to return a string instead of an integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,2]\n<strong>Output:</strong> &quot;210&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,30,34,5,9]\n<strong>Output:</strong> &quot;9534330&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n", "exampleTestcaseList": ["[10,2]", "[3,30,34,5,9]"], "metaData": {"name": "largestNumber", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "string"}}}}}