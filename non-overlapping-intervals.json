{"data": {"question": {"questionId": "435", "titleSlug": "non-overlapping-intervals", "title": "Non-overlapping Intervals", "topicTags": [{"name": "Array"}, {"name": "Dynamic Programming"}, {"name": "Greedy"}, {"name": "Sorting"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    int eraseOverlapIntervals(vector<vector<int>>& intervals) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int eraseOverlapIntervals(int[][] intervals) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def eraseOverlapIntervals(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        "}, {"langSlug": "c", "code": "int eraseOverlapIntervals(int** intervals, int intervalsSize, int* intervalsColSize) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int EraseOverlapIntervals(int[][] intervals) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number[][]} intervals\n * @return {number}\n */\nvar eraseOverlapIntervals = function(intervals) {\n    \n};"}, {"langSlug": "typescript", "code": "function eraseOverlapIntervals(intervals: number[][]): number {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Integer\n     */\n    function eraseOverlapIntervals($intervals) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func eraseOverlapIntervals(_ intervals: [[Int]]) -> Int {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun eraseOverlapIntervals(intervals: Array<IntArray>): Int {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  int eraseOverlapIntervals(List<List<int>> intervals) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func eraseOverlapIntervals(intervals [][]int) int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer[][]} intervals\n# @return {Integer}\ndef erase_overlap_intervals(intervals)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def eraseOverlapIntervals(intervals: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn erase_overlap_intervals(intervals: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (erase-overlap-intervals intervals)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"langSlug": "erlang", "code": "-spec erase_overlap_intervals(Intervals :: [[integer()]]) -> integer().\nerase_overlap_intervals(Intervals) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec erase_overlap_intervals(intervals :: [[integer]]) :: integer\n  def erase_overlap_intervals(intervals) do\n    \n  end\nend"}], "difficulty": "Medium", "content": "<p>Given an array of intervals <code>intervals</code> where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, return <em>the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[2,3],[3,4],[1,3]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> [1,3] can be removed and the rest of the intervals are non-overlapping.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[1,2],[1,2]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[2,3]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> You don&#39;t need to remove any of the intervals since they&#39;re already non-overlapping.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>-5 * 10<sup>4</sup> &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 5 * 10<sup>4</sup></code></li>\n</ul>\n", "exampleTestcaseList": ["[[1,2],[2,3],[3,4],[1,3]]", "[[1,2],[1,2],[1,2]]", "[[1,2],[2,3]]"], "metaData": {"name": "eraseOverlapIntervals", "params": [{"name": "intervals", "type": "integer[][]"}], "return": {"type": "integer"}}}}}