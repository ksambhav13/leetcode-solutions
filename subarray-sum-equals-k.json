{"data": {"question": {"questionId": "560", "titleSlug": "subarray-sum-equals-k", "title": "Subarray Sum Equals K", "topicTags": [{"name": "Array"}, {"name": "Hash Table"}, {"name": "Prefix Sum"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    int subarraySum(vector<int>& nums, int k) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int subarraySum(int[] nums, int k) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def subarraySum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        "}, {"langSlug": "c", "code": "int subarraySum(int* nums, int numsSize, int k) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int SubarraySum(int[] nums, int k) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar subarraySum = function(nums, k) {\n    \n};"}, {"langSlug": "typescript", "code": "function subarraySum(nums: number[], k: number): number {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function subarraySum($nums, $k) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func subarraySum(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun subarraySum(nums: IntArray, k: Int): Int {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  int subarraySum(List<int> nums, int k) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func subarraySum(nums []int, k int) int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef subarray_sum(nums, k)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def subarraySum(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn subarray_sum(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (subarray-sum nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"}, {"langSlug": "erlang", "code": "-spec subarray_sum(Nums :: [integer()], K :: integer()) -> integer().\nsubarray_sum(Nums, K) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec subarray_sum(nums :: [integer], k :: integer) :: integer\n  def subarray_sum(nums, k) do\n    \n  end\nend"}], "difficulty": "Medium", "content": "<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return <em>the total number of subarrays whose sum equals to</em> <code>k</code>.</p>\n\n<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,1], k = 2\n<strong>Output:</strong> 2\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3], k = 3\n<strong>Output:</strong> 2\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>-10<sup>7</sup> &lt;= k &lt;= 10<sup>7</sup></code></li>\n</ul>\n", "exampleTestcaseList": ["[1,1,1]\n2", "[1,2,3]\n3"], "metaData": {"name": "subarraySum", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}}}}