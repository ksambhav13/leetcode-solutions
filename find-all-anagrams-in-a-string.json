{"data": {"question": {"questionId": "438", "titleSlug": "find-all-anagrams-in-a-string", "title": "Find All Anagrams in a String", "topicTags": [{"name": "Hash Table"}, {"name": "String"}, {"name": "Sliding Window"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> findAnagrams(string s, string p) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public List<Integer> findAnagrams(String s, String p) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def findAnagrams(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: List[int]\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        "}, {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findAnagrams(char* s, char* p, int* returnSize) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public IList<int> FindAnagrams(string s, string p) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n    \n};"}, {"langSlug": "typescript", "code": "function findAnagrams(s: string, p: string): number[] {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Integer[]\n     */\n    function findAnagrams($s, $p) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func findAnagrams(_ s: String, _ p: String) -> [Int] {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun findAnagrams(s: String, p: String): List<Int> {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  List<int> findAnagrams(String s, String p) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func findAnagrams(s string, p string) []int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {String} s\n# @param {String} p\n# @return {Integer[]}\ndef find_anagrams(s, p)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def findAnagrams(s: String, p: String): List[Int] = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_anagrams(s: String, p: String) -> Vec<i32> {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (find-anagrams s p)\n  (-> string? string? (listof exact-integer?))\n  )"}, {"langSlug": "erlang", "code": "-spec find_anagrams(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> [integer()].\nfind_anagrams(S, P) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_anagrams(s :: String.t, p :: String.t) :: [integer]\n  def find_anagrams(s, p) do\n    \n  end\nend"}], "difficulty": "Medium", "content": "<p>Given two strings <code>s</code> and <code>p</code>, return <em>an array of all the start indices of </em><code>p</code><em>&#39;s anagrams in </em><code>s</code>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbaebabacd&quot;, p = &quot;abc&quot;\n<strong>Output:</strong> [0,6]\n<strong>Explanation:</strong>\nThe substring with start index = 0 is &quot;cba&quot;, which is an anagram of &quot;abc&quot;.\nThe substring with start index = 6 is &quot;bac&quot;, which is an anagram of &quot;abc&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abab&quot;, p = &quot;ab&quot;\n<strong>Output:</strong> [0,1,2]\n<strong>Explanation:</strong>\nThe substring with start index = 0 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.\nThe substring with start index = 1 is &quot;ba&quot;, which is an anagram of &quot;ab&quot;.\nThe substring with start index = 2 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, p.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> and <code>p</code> consist of lowercase English letters.</li>\n</ul>\n", "exampleTestcaseList": ["\"cbaebabacd\"\n\"abc\"", "\"abab\"\n\"ab\""], "metaData": {"name": "findAnagrams", "params": [{"name": "s", "type": "string"}, {"name": "p", "type": "string"}], "return": {"type": "list<integer>"}}}}}