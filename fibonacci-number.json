{"data": {"question": {"questionId": "1013", "titleSlug": "fibonacci-number", "title": "Fibonacci Number", "topicTags": [{"name": "Math"}, {"name": "Dynamic Programming"}, {"name": "Recursion"}, {"name": "Memoization"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    int fib(int n) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int fib(int n) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def fib(self, n: int) -> int:\n        "}, {"langSlug": "c", "code": "\n\nint fib(int n){\n\n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int Fib(int n) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar fib = function(n) {\n    \n};"}, {"langSlug": "typescript", "code": "function fib(n: number): number {\n\n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function fib($n) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func fib(_ n: Int) -> Int {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun fib(n: Int): Int {\n        \n    }\n}"}, {"langSlug": "golang", "code": "func fib(n int) int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef fib(n)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def fib(n: Int): Int = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn fib(n: i32) -> i32 {\n        \n    }\n}"}], "difficulty": "Easy", "content": "<p>The <b>Fibonacci numbers</b>, commonly denoted <code>F(n)</code> form a sequence, called the <b>Fibonacci sequence</b>, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,</p>\n\n<pre>\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n &gt; 1.\n</pre>\n\n<p>Given <code>n</code>, calculate <code>F(n)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> F(2) = F(1) + F(0) = 1 + 0 = 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> F(3) = F(2) + F(1) = 1 + 1 = 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> F(4) = F(3) + F(2) = 2 + 1 = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 30</code></li>\n</ul>\n", "exampleTestcaseList": ["2", "3", "4"], "metaData": {"name": "fib", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}}}}}