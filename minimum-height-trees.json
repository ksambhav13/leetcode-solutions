{
  "data": {
    "question": {
      "questionId": "310",
      "titleSlug": "minimum-height-trees",
      "title": "Minimum Height Trees",
      "topicTags": [
        { "name": "Depth-First Search" },
        { "name": "Breadth-First Search" },
        { "name": "Graph" },
        { "name": "Topological Sort" }
      ],
      "codeSnippets": [
        {
          "langSlug": "cpp",
          "code": "class Solution {\npublic:\n    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {\n        \n    }\n};"
        },
        {
          "langSlug": "java",
          "code": "class Solution {\n    public List<Integer> findMinHeightTrees(int n, int[][] edges) {\n        \n    }\n}"
        },
        {
          "langSlug": "python",
          "code": "class Solution(object):\n    def findMinHeightTrees(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "
        },
        {
          "langSlug": "python3",
          "code": "class Solution:\n    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:\n        "
        },
        {
          "langSlug": "c",
          "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findMinHeightTrees(int n, int** edges, int edgesSize, int* edgesColSize, int* returnSize) {\n    \n}"
        },
        {
          "langSlug": "csharp",
          "code": "public class Solution {\n    public IList<int> FindMinHeightTrees(int n, int[][] edges) {\n        \n    }\n}"
        },
        {
          "langSlug": "javascript",
          "code": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar findMinHeightTrees = function(n, edges) {\n    \n};"
        },
        {
          "langSlug": "typescript",
          "code": "function findMinHeightTrees(n: number, edges: number[][]): number[] {\n    \n};"
        },
        {
          "langSlug": "php",
          "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @return Integer[]\n     */\n    function findMinHeightTrees($n, $edges) {\n        \n    }\n}"
        },
        {
          "langSlug": "swift",
          "code": "class Solution {\n    func findMinHeightTrees(_ n: Int, _ edges: [[Int]]) -> [Int] {\n        \n    }\n}"
        },
        {
          "langSlug": "kotlin",
          "code": "class Solution {\n    fun findMinHeightTrees(n: Int, edges: Array<IntArray>): List<Int> {\n        \n    }\n}"
        },
        {
          "langSlug": "dart",
          "code": "class Solution {\n  List<int> findMinHeightTrees(int n, List<List<int>> edges) {\n    \n  }\n}"
        },
        {
          "langSlug": "golang",
          "code": "func findMinHeightTrees(n int, edges [][]int) []int {\n    \n}"
        },
        {
          "langSlug": "ruby",
          "code": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Integer[]}\ndef find_min_height_trees(n, edges)\n    \nend"
        },
        {
          "langSlug": "scala",
          "code": "object Solution {\n    def findMinHeightTrees(n: Int, edges: Array[Array[Int]]): List[Int] = {\n        \n    }\n}"
        },
        {
          "langSlug": "rust",
          "code": "impl Solution {\n    pub fn find_min_height_trees(n: i32, edges: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}"
        },
        {
          "langSlug": "racket",
          "code": "(define/contract (find-min-height-trees n edges)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n  )"
        },
        {
          "langSlug": "erlang",
          "code": "-spec find_min_height_trees(N :: integer(), Edges :: [[integer()]]) -> [integer()].\nfind_min_height_trees(N, Edges) ->\n  ."
        },
        {
          "langSlug": "elixir",
          "code": "defmodule Solution do\n  @spec find_min_height_trees(n :: integer, edges :: [[integer]]) :: [integer]\n  def find_min_height_trees(n, edges) do\n    \n  end\nend"
        }
      ],
      "difficulty": "Medium",
      "content": "<p>A tree is an undirected graph in which any two vertices are connected by&nbsp;<i>exactly</i>&nbsp;one path. In other words, any connected graph without simple cycles is a tree.</p>\n\n<p>Given a tree of <code>n</code> nodes&nbsp;labelled from <code>0</code> to <code>n - 1</code>, and an array of&nbsp;<code>n - 1</code>&nbsp;<code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an undirected edge between the two nodes&nbsp;<code>a<sub>i</sub></code> and&nbsp;<code>b<sub>i</sub></code> in the tree,&nbsp;you can choose any node of the tree as the root. When you select a node <code>x</code> as the root, the result tree has height <code>h</code>. Among all possible rooted trees, those with minimum height (i.e. <code>min(h)</code>)&nbsp; are called <strong>minimum height trees</strong> (MHTs).</p>\n\n<p>Return <em>a list of all <strong>MHTs&#39;</strong> root labels</em>.&nbsp;You can return the answer in <strong>any order</strong>.</p>\n\n<p>The <strong>height</strong> of a rooted tree is the number of edges on the longest downward path between the root and a leaf.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/01/e1.jpg\" style=\"width: 800px; height: 213px;\" />\n<pre>\n<strong>Input:</strong> n = 4, edges = [[1,0],[1,2],[1,3]]\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/01/e2.jpg\" style=\"width: 800px; height: 321px;\" />\n<pre>\n<strong>Input:</strong> n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\n<strong>Output:</strong> [3,4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>All the pairs <code>(a<sub>i</sub>, b<sub>i</sub>)</code> are distinct.</li>\n\t<li>The given input is <strong>guaranteed</strong> to be a tree and there will be <strong>no repeated</strong> edges.</li>\n</ul>\n",
      "exampleTestcaseList": [
        "4\n[[1,0],[1,2],[1,3]]",
        "6\n[[3,0],[3,1],[3,2],[3,4],[5,4]]"
      ],
      "metaData": {
        "name": "findMinHeightTrees",
        "params": [
          { "name": "n", "type": "integer" },
          { "name": "edges", "type": "integer[][]" }
        ],
        "return": { "type": "list<integer>" }
      }
    }
  }
}
