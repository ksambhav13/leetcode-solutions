{"data": {"question": {"questionId": "525", "titleSlug": "contiguous-array", "title": "Contiguous Array", "topicTags": [{"name": "Array"}, {"name": "Hash Table"}, {"name": "Prefix Sum"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    int findMaxLength(vector<int>& nums) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int findMaxLength(int[] nums) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def findMaxLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def findMaxLength(self, nums: List[int]) -> int:\n        "}, {"langSlug": "c", "code": "int findMaxLength(int* nums, int numsSize) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int FindMaxLength(int[] nums) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxLength = function(nums) {\n    \n};"}, {"langSlug": "typescript", "code": "function findMaxLength(nums: number[]): number {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findMaxLength($nums) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func findMaxLength(_ nums: [Int]) -> Int {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun findMaxLength(nums: IntArray): Int {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  int findMaxLength(List<int> nums) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func findMaxLength(nums []int) int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_max_length(nums)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def findMaxLength(nums: Array[Int]): Int = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn find_max_length(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (find-max-length nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"langSlug": "erlang", "code": "-spec find_max_length(Nums :: [integer()]) -> integer().\nfind_max_length(Nums) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec find_max_length(nums :: [integer]) :: integer\n  def find_max_length(nums) do\n    \n  end\nend"}], "difficulty": "Medium", "content": "<p>Given a binary array <code>nums</code>, return <em>the maximum length of a contiguous subarray with an equal number of </em><code>0</code><em> and </em><code>1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,0]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n", "exampleTestcaseList": ["[0,1]", "[0,1,0]"], "metaData": {"name": "findMaxLength", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}}}}