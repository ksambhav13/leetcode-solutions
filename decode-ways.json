{"data": {"question": {"questionId": "91", "titleSlug": "decode-ways", "title": "Decode Ways", "topicTags": [{"name": "String"}, {"name": "Dynamic Programming"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numDecodings(string s) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int numDecodings(String s) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        "}, {"langSlug": "c", "code": "int numDecodings(char* s) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int NumDecodings(string s) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar numDecodings = function(s) {\n    \n};"}, {"langSlug": "typescript", "code": "function numDecodings(s: string): number {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function numDecodings($s) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func numDecodings(_ s: String) -> Int {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun numDecodings(s: String): Int {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  int numDecodings(String s) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func numDecodings(s string) int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef num_decodings(s)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def numDecodings(s: String): Int = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_decodings(s: String) -> i32 {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (num-decodings s)\n  (-> string? exact-integer?)\n  )"}, {"langSlug": "erlang", "code": "-spec num_decodings(S :: unicode:unicode_binary()) -> integer().\nnum_decodings(S) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_decodings(s :: String.t) :: integer\n  def num_decodings(s) do\n    \n  end\nend"}], "difficulty": "Medium", "content": "<p>You have intercepted a secret message encoded as a string of numbers. The message is <strong>decoded</strong> via the following mapping:</p>\n\n<p><code>&quot;1&quot; -&gt; &#39;A&#39;<br />\n&quot;2&quot; -&gt; &#39;B&#39;<br />\n...<br />\n&quot;25&quot; -&gt; &#39;Y&#39;<br />\n&quot;26&quot; -&gt; &#39;Z&#39;</code></p>\n\n<p>However, while decoding the message, you realize that there are many different ways you can decode the message because some codes are contained in other codes (<code>&quot;2&quot;</code> and <code>&quot;5&quot;</code> vs <code>&quot;25&quot;</code>).</p>\n\n<p>For example, <code>&quot;11106&quot;</code> can be decoded into:</p>\n\n<ul>\n\t<li><code>&quot;AAJF&quot;</code> with the grouping <code>(1, 1, 10, 6)</code></li>\n\t<li><code>&quot;KJF&quot;</code> with the grouping <code>(11, 10, 6)</code></li>\n\t<li>The grouping <code>(1, 11, 06)</code> is invalid because <code>&quot;06&quot;</code> is not a valid code (only <code>&quot;6&quot;</code> is valid).</li>\n</ul>\n\n<p>Note: there may be strings that are impossible to decode.<br />\n<br />\nGiven a string s containing only digits, return the <strong>number of ways</strong> to <strong>decode</strong> it. If the entire string cannot be decoded in any valid way, return <code>0</code>.</p>\n\n<p>The test cases are generated so that the answer fits in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;12&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>&quot;12&quot; could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;226&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>&quot;226&quot; could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6).</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;06&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>&quot;06&quot; cannot be mapped to &quot;F&quot; because of the leading zero (&quot;6&quot; is different from &quot;06&quot;). In this case, the string is not a valid encoding, so return 0.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> contains only digits and may contain leading zero(s).</li>\n</ul>\n", "exampleTestcaseList": ["\"12\"", "\"226\"", "\"06\""], "metaData": {"name": "numDecodings", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}}}}