{"data": {"question": {"questionId": "931", "titleSlug": "maximum-frequency-stack", "title": "Maximum Frequency Stack", "topicTags": [{"name": "Hash Table"}, {"name": "Stack"}, {"name": "Design"}, {"name": "Ordered Set"}], "codeSnippets": [{"langSlug": "cpp", "code": "class FreqStack {\npublic:\n    FreqStack() {\n        \n    }\n    \n    void push(int val) {\n        \n    }\n    \n    int pop() {\n        \n    }\n};\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * FreqStack* obj = new FreqStack();\n * obj->push(val);\n * int param_2 = obj->pop();\n */"}, {"langSlug": "java", "code": "class FreqStack {\n\n    public FreqStack() {\n        \n    }\n    \n    public void push(int val) {\n        \n    }\n    \n    public int pop() {\n        \n    }\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * FreqStack obj = new FreqStack();\n * obj.push(val);\n * int param_2 = obj.pop();\n */"}, {"langSlug": "python", "code": "class FreqStack(object):\n\n    def __init__(self):\n        \n\n    def push(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def pop(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your FreqStack object will be instantiated and called as such:\n# obj = FreqStack()\n# obj.push(val)\n# param_2 = obj.pop()"}, {"langSlug": "python3", "code": "class FreqStack:\n\n    def __init__(self):\n        \n\n    def push(self, val: int) -> None:\n        \n\n    def pop(self) -> int:\n        \n\n\n# Your FreqStack object will be instantiated and called as such:\n# obj = FreqStack()\n# obj.push(val)\n# param_2 = obj.pop()"}, {"langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} FreqStack;\n\n\nFreqStack* freqStackCreate() {\n    \n}\n\nvoid freqStackPush(FreqStack* obj, int val) {\n    \n}\n\nint freqStackPop(FreqStack* obj) {\n    \n}\n\nvoid freqStackFree(FreqStack* obj) {\n    \n}\n\n/**\n * Your FreqStack struct will be instantiated and called as such:\n * FreqStack* obj = freqStackCreate();\n * freqStackPush(obj, val);\n \n * int param_2 = freqStackPop(obj);\n \n * freqStackFree(obj);\n*/"}, {"langSlug": "csharp", "code": "public class FreqStack {\n\n    public FreqStack() {\n        \n    }\n    \n    public void Push(int val) {\n        \n    }\n    \n    public int Pop() {\n        \n    }\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * FreqStack obj = new FreqStack();\n * obj.Push(val);\n * int param_2 = obj.Pop();\n */"}, {"langSlug": "javascript", "code": "\nvar FreqStack = function() {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nFreqStack.prototype.push = function(val) {\n    \n};\n\n/**\n * @return {number}\n */\nFreqStack.prototype.pop = function() {\n    \n};\n\n/** \n * Your FreqStack object will be instantiated and called as such:\n * var obj = new FreqStack()\n * obj.push(val)\n * var param_2 = obj.pop()\n */"}, {"langSlug": "typescript", "code": "class FreqStack {\n    constructor() {\n        \n    }\n\n    push(val: number): void {\n        \n    }\n\n    pop(): number {\n        \n    }\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * var obj = new FreqStack()\n * obj.push(val)\n * var param_2 = obj.pop()\n */"}, {"langSlug": "php", "code": "class FreqStack {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return NULL\n     */\n    function push($val) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function pop() {\n        \n    }\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * $obj = FreqStack();\n * $obj->push($val);\n * $ret_2 = $obj->pop();\n */"}, {"langSlug": "swift", "code": "\nclass FreqStack {\n\n    init() {\n        \n    }\n    \n    func push(_ val: Int) {\n        \n    }\n    \n    func pop() -> Int {\n        \n    }\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * let obj = FreqStack()\n * obj.push(val)\n * let ret_2: Int = obj.pop()\n */"}, {"langSlug": "kotlin", "code": "class FreqStack() {\n\n    fun push(`val`: Int) {\n        \n    }\n\n    fun pop(): Int {\n        \n    }\n\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * var obj = FreqStack()\n * obj.push(`val`)\n * var param_2 = obj.pop()\n */"}, {"langSlug": "dart", "code": "class FreqStack {\n\n  FreqStack() {\n    \n  }\n  \n  void push(int val) {\n    \n  }\n  \n  int pop() {\n    \n  }\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * FreqStack obj = FreqStack();\n * obj.push(val);\n * int param2 = obj.pop();\n */"}, {"langSlug": "golang", "code": "type FreqStack struct {\n    \n}\n\n\nfunc Constructor() FreqStack {\n    \n}\n\n\nfunc (this *FreqStack) Push(val int)  {\n    \n}\n\n\nfunc (this *FreqStack) Pop() int {\n    \n}\n\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Push(val);\n * param_2 := obj.Pop();\n */"}, {"langSlug": "ruby", "code": "class FreqStack\n    def initialize()\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Void\n=end\n    def push(val)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop()\n        \n    end\n\n\nend\n\n# Your FreqStack object will be instantiated and called as such:\n# obj = FreqStack.new()\n# obj.push(val)\n# param_2 = obj.pop()"}, {"langSlug": "scala", "code": "class FreqStack() {\n\n    def push(`val`: Int): Unit = {\n        \n    }\n\n    def pop(): Int = {\n        \n    }\n\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * val obj = new FreqStack()\n * obj.push(`val`)\n * val param_2 = obj.pop()\n */"}, {"langSlug": "rust", "code": "struct FreqStack {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl FreqStack {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn push(&self, val: i32) {\n        \n    }\n    \n    fn pop(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * let obj = FreqStack::new();\n * obj.push(val);\n * let ret_2: i32 = obj.pop();\n */"}, {"langSlug": "racket", "code": "(define freq-stack%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; push : exact-integer? -> void?\n    (define/public (push val)\n      )\n    ; pop : -> exact-integer?\n    (define/public (pop)\n      )))\n\n;; Your freq-stack% object will be instantiated and called as such:\n;; (define obj (new freq-stack%))\n;; (send obj push val)\n;; (define param_2 (send obj pop))"}, {"langSlug": "erlang", "code": "-spec freq_stack_init_() -> any().\nfreq_stack_init_() ->\n  .\n\n-spec freq_stack_push(Val :: integer()) -> any().\nfreq_stack_push(Val) ->\n  .\n\n-spec freq_stack_pop() -> integer().\nfreq_stack_pop() ->\n  .\n\n\n%% Your functions will be called as such:\n%% freq_stack_init_(),\n%% freq_stack_push(Val),\n%% Param_2 = freq_stack_pop(),\n\n%% freq_stack_init_ will be called before every test case, in which you can do some necessary initializations."}, {"langSlug": "elixir", "code": "defmodule FreqStack do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec push(val :: integer) :: any\n  def push(val) do\n    \n  end\n\n  @spec pop() :: integer\n  def pop() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# FreqStack.init_()\n# FreqStack.push(val)\n# param_2 = FreqStack.pop()\n\n# FreqStack.init_ will be called before every test case, in which you can do some necessary initializations."}], "difficulty": "Hard", "content": "<p>Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.</p>\n\n<p>Implement the <code>FreqStack</code> class:</p>\n\n<ul>\n\t<li><code>FreqStack()</code> constructs an empty frequency stack.</li>\n\t<li><code>void push(int val)</code> pushes an integer <code>val</code> onto the top of the stack.</li>\n\t<li><code>int pop()</code> removes and returns the most frequent element in the stack.\n\t<ul>\n\t\t<li>If there is a tie for the most frequent element, the element closest to the stack&#39;s top is removed and returned.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;FreqStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;]\n[[], [5], [7], [5], [7], [4], [5], [], [], [], []]\n<strong>Output</strong>\n[null, null, null, null, null, null, null, 5, 7, 5, 4]\n\n<strong>Explanation</strong>\nFreqStack freqStack = new FreqStack();\nfreqStack.push(5); // The stack is [5]\nfreqStack.push(7); // The stack is [5,7]\nfreqStack.push(5); // The stack is [5,7,5]\nfreqStack.push(7); // The stack is [5,7,5,7]\nfreqStack.push(4); // The stack is [5,7,5,7,4]\nfreqStack.push(5); // The stack is [5,7,5,7,4,5]\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].\nfreqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].\nfreqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= val &lt;= 10<sup>9</sup></code></li>\n\t<li>At most <code>2 * 10<sup>4</sup></code> calls will be made to <code>push</code> and <code>pop</code>.</li>\n\t<li>It is guaranteed that there will be at least one element in the stack before calling <code>pop</code>.</li>\n</ul>\n", "exampleTestcaseList": ["[\"FreqStack\",\"push\",\"push\",\"push\",\"push\",\"push\",\"push\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]"], "metaData": {"classname": "FreqStack", "maxbytesperline": 200000, "constructor": {"params": []}, "methods": [{"name": "push", "params": [{"type": "integer", "name": "val"}], "return": {"type": "void"}}, {"name": "pop", "params": [], "return": {"type": "integer"}}], "systemdesign": true, "params": [{"name": "inputs", "type": "integer[]"}, {"name": "inputs", "type": "integer[]"}], "return": {"type": "list<String>", "dealloc": true}}}}}