{"data": {"question": {"questionId": "394", "titleSlug": "decode-string", "title": "Decode String", "topicTags": [{"name": "String"}, {"name": "Stack"}, {"name": "Recursion"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    string decodeString(string s) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public String decodeString(String s) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def decodeString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def decodeString(self, s: str) -> str:\n        "}, {"langSlug": "c", "code": "char* decodeString(char* s) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public string DecodeString(string s) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar decodeString = function(s) {\n    \n};"}, {"langSlug": "typescript", "code": "function decodeString(s: string): string {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function decodeString($s) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func decodeString(_ s: String) -> String {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun decodeString(s: String): String {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  String decodeString(String s) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func decodeString(s string) string {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef decode_string(s)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def decodeString(s: String): String = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn decode_string(s: String) -> String {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (decode-string s)\n  (-> string? string?)\n  )"}, {"langSlug": "erlang", "code": "-spec decode_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\ndecode_string(S) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec decode_string(s :: String.t) :: String.t\n  def decode_string(s) do\n    \n  end\nend"}], "difficulty": "Medium", "content": "<p>Given an encoded string, return its decoded string.</p>\n\n<p>The encoding rule is: <code>k[encoded_string]</code>, where the <code>encoded_string</code> inside the square brackets is being repeated exactly <code>k</code> times. Note that <code>k</code> is guaranteed to be a positive integer.</p>\n\n<p>You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <code>k</code>. For example, there will not be input like <code>3a</code> or <code>2[4]</code>.</p>\n\n<p>The test cases are generated so that the length of the output will never exceed <code>10<sup>5</sup></code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3[a]2[bc]&quot;\n<strong>Output:</strong> &quot;aaabcbc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3[a2[c]]&quot;\n<strong>Output:</strong> &quot;accaccacc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;2[abc]3[cd]ef&quot;\n<strong>Output:</strong> &quot;abcabccdcdcdef&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 30</code></li>\n\t<li><code>s</code> consists of lowercase English letters, digits, and square brackets <code>&#39;[]&#39;</code>.</li>\n\t<li><code>s</code> is guaranteed to be <strong>a valid</strong> input.</li>\n\t<li>All the integers in <code>s</code> are in the range <code>[1, 300]</code>.</li>\n</ul>\n", "exampleTestcaseList": ["\"3[a]2[bc]\"", "\"3[a2[c]]\"", "\"2[abc]3[cd]ef\""], "metaData": {"name": "decodeString", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}}}}