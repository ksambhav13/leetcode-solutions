{"data": {"question": {"questionId": "338", "titleSlug": "counting-bits", "title": "Counting Bits", "topicTags": [{"name": "Dynamic Programming"}, {"name": "Bit Manipulation"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> countBits(int n) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int[] countBits(int n) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def countBits(self, n: int) -> List[int]:\n        "}, {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countBits(int n, int* returnSize) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int[] CountBits(int n) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number[]}\n */\nvar countBits = function(n) {\n    \n};"}, {"langSlug": "typescript", "code": "function countBits(n: number): number[] {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[]\n     */\n    function countBits($n) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func countBits(_ n: Int) -> [Int] {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun countBits(n: Int): IntArray {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  List<int> countBits(int n) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func countBits(n int) []int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer[]}\ndef count_bits(n)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def countBits(n: Int): Array[Int] = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn count_bits(n: i32) -> Vec<i32> {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (count-bits n)\n  (-> exact-integer? (listof exact-integer?))\n  )"}, {"langSlug": "erlang", "code": "-spec count_bits(N :: integer()) -> [integer()].\ncount_bits(N) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec count_bits(n :: integer) :: [integer]\n  def count_bits(n) do\n    \n  end\nend"}], "difficulty": "Easy", "content": "<p>Given an integer <code>n</code>, return <em>an array </em><code>ans</code><em> of length </em><code>n + 1</code><em> such that for each </em><code>i</code><em> </em>(<code>0 &lt;= i &lt;= n</code>)<em>, </em><code>ans[i]</code><em> is the <strong>number of </strong></em><code>1</code><em><strong>&#39;s</strong> in the binary representation of </em><code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> [0,1,1]\n<strong>Explanation:</strong>\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5\n<strong>Output:</strong> [0,1,1,2,1,2]\n<strong>Explanation:</strong>\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n3 --&gt; 11\n4 --&gt; 100\n5 --&gt; 101\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>It is very easy to come up with a solution with a runtime of <code>O(n log n)</code>. Can you do it in linear time <code>O(n)</code> and possibly in a single pass?</li>\n\t<li>Can you do it without using any built-in function (i.e., like <code>__builtin_popcount</code> in C++)?</li>\n</ul>\n", "exampleTestcaseList": ["2", "5"], "metaData": {"name": "countBits", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer[]"}}}}}