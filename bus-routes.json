{"data": {"question": {"questionId": "833", "titleSlug": "bus-routes", "title": "Bus Routes", "topicTags": [{"name": "Array"}, {"name": "Hash Table"}, {"name": "Breadth-First Search"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    int numBusesToDestination(vector<vector<int>>& routes, int source, int target) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int numBusesToDestination(int[][] routes, int source, int target) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def numBusesToDestination(self, routes, source, target):\n        \"\"\"\n        :type routes: List[List[int]]\n        :type source: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:\n        "}, {"langSlug": "c", "code": "int numBusesToDestination(int** routes, int routesSize, int* routesColSize, int source, int target) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int NumBusesToDestination(int[][] routes, int source, int target) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number[][]} routes\n * @param {number} source\n * @param {number} target\n * @return {number}\n */\nvar numBusesToDestination = function(routes, source, target) {\n    \n};"}, {"langSlug": "typescript", "code": "function numBusesToDestination(routes: number[][], source: number, target: number): number {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $routes\n     * @param Integer $source\n     * @param Integer $target\n     * @return Integer\n     */\n    function numBusesToDestination($routes, $source, $target) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func numBusesToDestination(_ routes: [[Int]], _ source: Int, _ target: Int) -> Int {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun numBusesToDestination(routes: Array<IntArray>, source: Int, target: Int): Int {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  int numBusesToDestination(List<List<int>> routes, int source, int target) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func numBusesToDestination(routes [][]int, source int, target int) int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer[][]} routes\n# @param {Integer} source\n# @param {Integer} target\n# @return {Integer}\ndef num_buses_to_destination(routes, source, target)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def numBusesToDestination(routes: Array[Array[Int]], source: Int, target: Int): Int = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn num_buses_to_destination(routes: Vec<Vec<i32>>, source: i32, target: i32) -> i32 {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (num-buses-to-destination routes source target)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer? exact-integer?)\n  )"}, {"langSlug": "erlang", "code": "-spec num_buses_to_destination(Routes :: [[integer()]], Source :: integer(), Target :: integer()) -> integer().\nnum_buses_to_destination(Routes, Source, Target) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec num_buses_to_destination(routes :: [[integer]], source :: integer, target :: integer) :: integer\n  def num_buses_to_destination(routes, source, target) do\n    \n  end\nend"}], "difficulty": "Hard", "content": "<p>You are given an array <code>routes</code> representing bus routes where <code>routes[i]</code> is a bus route that the <code>i<sup>th</sup></code> bus repeats forever.</p>\n\n<ul>\n\t<li>For example, if <code>routes[0] = [1, 5, 7]</code>, this means that the <code>0<sup>th</sup></code> bus travels in the sequence <code>1 -&gt; 5 -&gt; 7 -&gt; 1 -&gt; 5 -&gt; 7 -&gt; 1 -&gt; ...</code> forever.</li>\n</ul>\n\n<p>You will start at the bus stop <code>source</code> (You are not on any bus initially), and you want to go to the bus stop <code>target</code>. You can travel between bus stops by buses only.</p>\n\n<p>Return <em>the least number of buses you must take to travel from </em><code>source</code><em> to </em><code>target</code>. Return <code>-1</code> if it is not possible.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> routes = [[1,2,7],[3,6,7]], source = 1, target = 6\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12\n<strong>Output:</strong> -1\n</pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= routes.length &lt;= 500</code>.</li>\n\t<li><code>1 &lt;= routes[i].length &lt;= 10<sup>5</sup></code></li>\n\t<li>All the values of <code>routes[i]</code> are <strong>unique</strong>.</li>\n\t<li><code>sum(routes[i].length) &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= routes[i][j] &lt; 10<sup>6</sup></code></li>\n\t<li><code>0 &lt;= source, target &lt; 10<sup>6</sup></code></li>\n</ul>\n", "exampleTestcaseList": ["[[1,2,7],[3,6,7]]\n1\n6", "[[7,12],[4,5,15],[6],[15,19],[9,12,13]]\n15\n12"], "metaData": {"name": "numBusesToDestination", "params": [{"name": "routes", "type": "integer[][]"}, {"name": "source", "type": "integer"}, {"name": "target", "type": "integer"}], "return": {"type": "integer"}}}}}