{"data": {"question": {"questionId": "189", "titleSlug": "rotate-array", "title": "Rotate Array", "topicTags": [{"name": "Array"}, {"name": "Math"}, {"name": "Two Pointers"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public void rotate(int[] nums, int k) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        "}, {"langSlug": "c", "code": "void rotate(int* nums, int numsSize, int k) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public void Rotate(int[] nums, int k) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar rotate = function(nums, k) {\n    \n};"}, {"langSlug": "typescript", "code": "/**\n Do not return anything, modify nums in-place instead.\n */\nfunction rotate(nums: number[], k: number): void {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return NULL\n     */\n    function rotate(&$nums, $k) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func rotate(_ nums: inout [Int], _ k: Int) {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun rotate(nums: IntArray, k: Int): Unit {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  void rotate(List<int> nums, int k) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func rotate(nums []int, k int)  {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Void} Do not return anything, modify nums in-place instead.\ndef rotate(nums, k)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def rotate(nums: Array[Int], k: Int): Unit = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn rotate(nums: &mut Vec<i32>, k: i32) {\n        \n    }\n}"}], "difficulty": "Medium", "content": "<p>Given an integer array <code>nums</code>, rotate the array to the right by <code>k</code> steps, where <code>k</code> is non-negative.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6,7], k = 3\n<strong>Output:</strong> [5,6,7,1,2,3,4]\n<strong>Explanation:</strong>\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,-100,3,99], k = 2\n<strong>Output:</strong> [3,99,-1,-100]\n<strong>Explanation:</strong> \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Try to come up with as many solutions as you can. There are at least <strong>three</strong> different ways to solve this problem.</li>\n\t<li>Could you do it in-place with <code>O(1)</code> extra space?</li>\n</ul>\n", "exampleTestcaseList": ["[1,2,3,4,5,6,7]\n3", "[-1,-100,3,99]\n2"], "metaData": {"name": "rotate", "params": [{"name": "nums", "type": "integer[]"}, {"name": "k", "type": "integer"}], "return": {"type": "void"}, "output": {"paramindex": 0}}}}}