{"data": {"question": {"questionId": "84", "titleSlug": "largest-rectangle-in-histogram", "title": "Largest Rectangle in Histogram", "topicTags": [{"name": "Array"}, {"name": "Stack"}, {"name": "Monotonic Stack"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    int largestRectangleArea(vector<int>& heights) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int largestRectangleArea(int[] heights) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        "}, {"langSlug": "c", "code": "int largestRectangleArea(int* heights, int heightsSize) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int LargestRectangleArea(int[] heights) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar largestRectangleArea = function(heights) {\n    \n};"}, {"langSlug": "typescript", "code": "function largestRectangleArea(heights: number[]): number {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @return Integer\n     */\n    function largestRectangleArea($heights) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func largestRectangleArea(_ heights: [Int]) -> Int {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun largestRectangleArea(heights: IntArray): Int {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  int largestRectangleArea(List<int> heights) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func largestRectangleArea(heights []int) int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer[]} heights\n# @return {Integer}\ndef largest_rectangle_area(heights)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def largestRectangleArea(heights: Array[Int]): Int = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn largest_rectangle_area(heights: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (largest-rectangle-area heights)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"langSlug": "erlang", "code": "-spec largest_rectangle_area(Heights :: [integer()]) -> integer().\nlargest_rectangle_area(Heights) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec largest_rectangle_area(heights :: [integer]) :: integer\n  def largest_rectangle_area(heights) do\n    \n  end\nend"}], "difficulty": "Hard", "content": "<p>Given an array of integers <code>heights</code> representing the histogram&#39;s bar height where the width of each bar is <code>1</code>, return <em>the area of the largest rectangle in the histogram</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg\" style=\"width: 522px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> heights = [2,1,5,6,2,3]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg\" style=\"width: 202px; height: 362px;\" />\n<pre>\n<strong>Input:</strong> heights = [2,4]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= heights.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= heights[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "exampleTestcaseList": ["[2,1,5,6,2,3]", "[2,4]"], "metaData": {"name": "largestRectangleArea", "params": [{"name": "heights", "type": "integer[]"}], "return": {"type": "integer"}}}}}