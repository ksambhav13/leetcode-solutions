{"data": {"question": {"questionId": "874", "titleSlug": "backspace-string-compare", "title": "Backspace String Compare", "topicTags": [{"name": "Two Pointers"}, {"name": "String"}, {"name": "Stack"}, {"name": "Simulation"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool backspaceCompare(string s, string t) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public boolean backspaceCompare(String s, String t) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def backspaceCompare(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def backspaceCompare(self, s: str, t: str) -> bool:\n        "}, {"langSlug": "c", "code": "bool backspaceCompare(char* s, char* t) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public bool BackspaceCompare(string s, string t) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar backspaceCompare = function(s, t) {\n    \n};"}, {"langSlug": "typescript", "code": "function backspaceCompare(s: string, t: string): boolean {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Boolean\n     */\n    function backspaceCompare($s, $t) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func backspaceCompare(_ s: String, _ t: String) -> Bool {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun backspaceCompare(s: String, t: String): Boolean {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  bool backspaceCompare(String s, String t) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func backspaceCompare(s string, t string) bool {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef backspace_compare(s, t)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def backspaceCompare(s: String, t: String): Boolean = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn backspace_compare(s: String, t: String) -> bool {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (backspace-compare s t)\n  (-> string? string? boolean?)\n  )"}, {"langSlug": "erlang", "code": "-spec backspace_compare(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> boolean().\nbackspace_compare(S, T) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec backspace_compare(s :: String.t, t :: String.t) :: boolean\n  def backspace_compare(s, t) do\n    \n  end\nend"}], "difficulty": "Easy", "content": "<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> <em>if they are equal when both are typed into empty text editors</em>. <code>&#39;#&#39;</code> means a backspace character.</p>\n\n<p>Note that after backspacing an empty text, the text will continue empty.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab#c&quot;, t = &quot;ad#c&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Both s and t become &quot;ac&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab##&quot;, t = &quot;c#d#&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Both s and t become &quot;&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a#c&quot;, t = &quot;b&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> s becomes &quot;c&quot; while t becomes &quot;b&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code><span>1 &lt;= s.length, t.length &lt;= 200</span></code></li>\n\t<li><span><code>s</code> and <code>t</code> only contain lowercase letters and <code>&#39;#&#39;</code> characters.</span></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Can you solve it in <code>O(n)</code> time and <code>O(1)</code> space?</p>\n", "exampleTestcaseList": ["\"ab#c\"\n\"ad#c\"", "\"ab##\"\n\"c#d#\"", "\"a#c\"\n\"b\""], "metaData": {"name": "backspaceCompare", "params": [{"name": "s", "type": "string"}, {"name": "t", "type": "string"}], "return": {"type": "boolean"}}}}}