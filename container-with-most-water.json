{"data": {"question": {"questionId": "11", "titleSlug": "container-with-most-water", "title": "Container With Most Water", "topicTags": [{"name": "Array"}, {"name": "Two Pointers"}, {"name": "Greedy"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int maxArea(int[] height) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        "}, {"langSlug": "c", "code": "int maxArea(int* height, int heightSize) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int MaxArea(int[] height) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n    \n};"}, {"langSlug": "typescript", "code": "function maxArea(height: number[]): number {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function maxArea($height) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func maxArea(_ height: [Int]) -> Int {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun maxArea(height: IntArray): Int {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  int maxArea(List<int> height) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func maxArea(height []int) int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer[]} height\n# @return {Integer}\ndef max_area(height)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def maxArea(height: Array[Int]): Int = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn max_area(height: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (max-area height)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"langSlug": "erlang", "code": "-spec max_area(Height :: [integer()]) -> integer().\nmax_area(Height) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_area(height :: [integer]) :: integer\n  def max_area(height) do\n    \n  end\nend"}], "difficulty": "Medium", "content": "<p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>i<sup>th</sup></code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p>\n\n<p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p>\n\n<p>Return <em>the maximum amount of water a container can store</em>.</p>\n\n<p><strong>Notice</strong> that you may not slant the container.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" style=\"width: 600px; height: 287px;\" />\n<pre>\n<strong>Input:</strong> height = [1,8,6,2,5,4,8,3,7]\n<strong>Output:</strong> 49\n<strong>Explanation:</strong> The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [1,1]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "exampleTestcaseList": ["[1,8,6,2,5,4,8,3,7]", "[1,1]"], "metaData": {"name": "maxArea", "params": [{"name": "height", "type": "integer[]"}], "return": {"type": "integer"}}}}}