{"data": {"question": {"questionId": "136", "titleSlug": "single-number", "title": "Single Number", "topicTags": [{"name": "Array"}, {"name": "Bit Manipulation"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int singleNumber(int[] nums) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        "}, {"langSlug": "c", "code": "int singleNumber(int* nums, int numsSize) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int SingleNumber(int[] nums) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    \n};"}, {"langSlug": "typescript", "code": "function singleNumber(nums: number[]): number {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function singleNumber($nums) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func singleNumber(_ nums: [Int]) -> Int {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun singleNumber(nums: IntArray): Int {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  int singleNumber(List<int> nums) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func singleNumber(nums []int) int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef single_number(nums)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def singleNumber(nums: Array[Int]): Int = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn single_number(nums: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (single-number nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"langSlug": "erlang", "code": "-spec single_number(Nums :: [integer()]) -> integer().\nsingle_number(Nums) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec single_number(nums :: [integer]) :: integer\n  def single_number(nums) do\n    \n  end\nend"}], "difficulty": "Easy", "content": "<p>Given a <strong>non-empty</strong>&nbsp;array of integers <code>nums</code>, every element appears <em>twice</em> except for one. Find that single one.</p>\n\n<p>You must&nbsp;implement a solution with a linear runtime complexity and use&nbsp;only constant&nbsp;extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [2,2,1]\n<strong>Output:</strong> 1\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [4,1,2,1,2]\n<strong>Output:</strong> 4\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1]\n<strong>Output:</strong> 1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-3 * 10<sup>4</sup> &lt;= nums[i] &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li>Each element in the array appears twice except for one element which appears only once.</li>\n</ul>\n", "exampleTestcaseList": ["[2,2,1]", "[4,1,2,1,2]", "[1]"], "metaData": {"name": "singleNumber", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "integer"}}}}}