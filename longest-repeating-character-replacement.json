{"data": {"question": {"questionId": "424", "titleSlug": "longest-repeating-character-replacement", "title": "Longest Repeating Character Replacement", "topicTags": [{"name": "Hash Table"}, {"name": "String"}, {"name": "Sliding Window"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    int characterReplacement(string s, int k) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int characterReplacement(String s, int k) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def characterReplacement(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        "}, {"langSlug": "c", "code": "int characterReplacement(char* s, int k) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int CharacterReplacement(string s, int k) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar characterReplacement = function(s, k) {\n    \n};"}, {"langSlug": "typescript", "code": "function characterReplacement(s: string, k: number): number {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function characterReplacement($s, $k) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func characterReplacement(_ s: String, _ k: Int) -> Int {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun characterReplacement(s: String, k: Int): Int {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  int characterReplacement(String s, int k) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func characterReplacement(s string, k int) int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef character_replacement(s, k)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def characterReplacement(s: String, k: Int): Int = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn character_replacement(s: String, k: i32) -> i32 {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (character-replacement s k)\n  (-> string? exact-integer? exact-integer?)\n  )"}, {"langSlug": "erlang", "code": "-spec character_replacement(S :: unicode:unicode_binary(), K :: integer()) -> integer().\ncharacter_replacement(S, K) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec character_replacement(s :: String.t, k :: integer) :: integer\n  def character_replacement(s, k) do\n    \n  end\nend"}], "difficulty": "Medium", "content": "<p>You are given a string <code>s</code> and an integer <code>k</code>. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most <code>k</code> times.</p>\n\n<p>Return <em>the length of the longest substring containing the same letter you can get after performing the above operations</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ABAB&quot;, k = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Replace the two &#39;A&#39;s with two &#39;B&#39;s or vice versa.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;AABABBA&quot;, k = 1\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Replace the one &#39;A&#39; in the middle with &#39;B&#39; and form &quot;AABBBBA&quot;.\nThe substring &quot;BBBB&quot; has the longest repeating letters, which is 4.\nThere may exists other ways to achieve this answer too.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of only uppercase English letters.</li>\n\t<li><code>0 &lt;= k &lt;= s.length</code></li>\n</ul>\n", "exampleTestcaseList": ["\"ABAB\"\n2", "\"AABABBA\"\n1"], "metaData": {"name": "characterReplacement", "params": [{"name": "s", "type": "string"}, {"name": "k", "type": "integer"}], "return": {"type": "integer"}}}}}