{"data": {"question": {"questionId": "32", "titleSlug": "longest-valid-parentheses", "title": "Longest Valid Parentheses", "topicTags": [{"name": "String"}, {"name": "Dynamic Programming"}, {"name": "Stack"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestValidParentheses(string s) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int longestValidParentheses(String s) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        "}, {"langSlug": "c", "code": "int longestValidParentheses(char* s) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int LongestValidParentheses(string s) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar longestValidParentheses = function(s) {\n    \n};"}, {"langSlug": "typescript", "code": "function longestValidParentheses(s: string): number {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestValidParentheses($s) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func longestValidParentheses(_ s: String) -> Int {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun longestValidParentheses(s: String): Int {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  int longestValidParentheses(String s) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func longestValidParentheses(s string) int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef longest_valid_parentheses(s)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def longestValidParentheses(s: String): Int = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_valid_parentheses(s: String) -> i32 {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (longest-valid-parentheses s)\n  (-> string? exact-integer?)\n  )"}, {"langSlug": "erlang", "code": "-spec longest_valid_parentheses(S :: unicode:unicode_binary()) -> integer().\nlongest_valid_parentheses(S) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_valid_parentheses(s :: String.t) :: integer\n  def longest_valid_parentheses(s) do\n    \n  end\nend"}], "difficulty": "Hard", "content": "<p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, return <em>the length of the longest valid (well-formed) parentheses </em><span data-keyword=\"substring-nonempty\"><em>substring</em></span>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(()&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The longest valid parentheses substring is &quot;()&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;)()())&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest valid parentheses substring is &quot;()()&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;&quot;\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s[i]</code> is <code>&#39;(&#39;</code>, or <code>&#39;)&#39;</code>.</li>\n</ul>\n", "exampleTestcaseList": ["\"(()\"", "\")()())\"", "\"\""], "metaData": {"name": "longestValidParentheses", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}}}}