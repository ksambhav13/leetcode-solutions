{"data": {"question": {"questionId": "191", "titleSlug": "number-of-1-bits", "title": "Number of 1 Bits", "topicTags": [{"name": "Divide and Conquer"}, {"name": "Bit Manipulation"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    int hammingWeight(int n) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int hammingWeight(int n) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def hammingWeight(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        "}, {"langSlug": "c", "code": "int hammingWeight(int n) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int HammingWeight(int n) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar hammingWeight = function(n) {\n    \n};"}, {"langSlug": "typescript", "code": "function hammingWeight(n: number): number {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function hammingWeight($n) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func hammingWeight(_ n: Int) -> Int {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun hammingWeight(n: Int): Int {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  int hammingWeight(int n) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func hammingWeight(n int) int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer} n\n# @return {Integer}\ndef hamming_weight(n)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def hammingWeight(n: Int): Int = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn hamming_weight(n: i32) -> i32 {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (hamming-weight n)\n  (-> exact-integer? exact-integer?)\n  )"}, {"langSlug": "erlang", "code": "-spec hamming_weight(N :: integer()) -> integer().\nhamming_weight(N) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec hamming_weight(n :: integer) :: integer\n  def hamming_weight(n) do\n    \n  end\nend"}], "difficulty": "Easy", "content": "<p>Write a function that takes the binary representation of a positive integer and returns the number of <span data-keyword=\"set-bit\">set bits</span> it has (also known as the <a href=\"http://en.wikipedia.org/wiki/Hamming_weight\" target=\"_blank\">Hamming weight</a>).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 11</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The input binary string <strong>1011</strong> has a total of three set bits.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 128</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The input binary string <strong>10000000</strong> has a total of one set bit.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 2147483645</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">30</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The input binary string <strong>1111111111111111111111111111101</strong> has a total of thirty set bits.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> If this function is called many times, how would you optimize it?", "exampleTestcaseList": ["11", "128", "2147483645"], "metaData": {"name": "hammingWeight", "params": [{"name": "n", "type": "integer"}], "return": {"type": "integer"}, "manual": false}}}}