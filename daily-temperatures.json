{
  "data": {
    "question": {
      "questionId": "739",
      "titleSlug": "daily-temperatures",
      "title": "Daily Temperatures",
      "topicTags": [
        { "name": "Array" },
        { "name": "Stack" },
        { "name": "Monotonic Stack" }
      ],
      "codeSnippets": [
        {
          "langSlug": "cpp",
          "code": "class Solution {\npublic:\n    vector<int> dailyTemperatures(vector<int>& temperatures) {\n        \n    }\n};"
        },
        {
          "langSlug": "java",
          "code": "class Solution {\n    public int[] dailyTemperatures(int[] temperatures) {\n        \n    }\n}"
        },
        {
          "langSlug": "python",
          "code": "class Solution(object):\n    def dailyTemperatures(self, temperatures):\n        \"\"\"\n        :type temperatures: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
        },
        {
          "langSlug": "python3",
          "code": "class Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        "
        },
        {
          "langSlug": "c",
          "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* dailyTemperatures(int* temperatures, int temperaturesSize, int* returnSize) {\n    \n}"
        },
        {
          "langSlug": "csharp",
          "code": "public class Solution {\n    public int[] DailyTemperatures(int[] temperatures) {\n        \n    }\n}"
        },
        {
          "langSlug": "javascript",
          "code": "/**\n * @param {number[]} temperatures\n * @return {number[]}\n */\nvar dailyTemperatures = function(temperatures) {\n    \n};"
        },
        {
          "langSlug": "typescript",
          "code": "function dailyTemperatures(temperatures: number[]): number[] {\n    \n};"
        },
        {
          "langSlug": "php",
          "code": "class Solution {\n\n    /**\n     * @param Integer[] $temperatures\n     * @return Integer[]\n     */\n    function dailyTemperatures($temperatures) {\n        \n    }\n}"
        },
        {
          "langSlug": "swift",
          "code": "class Solution {\n    func dailyTemperatures(_ temperatures: [Int]) -> [Int] {\n        \n    }\n}"
        },
        {
          "langSlug": "kotlin",
          "code": "class Solution {\n    fun dailyTemperatures(temperatures: IntArray): IntArray {\n        \n    }\n}"
        },
        {
          "langSlug": "dart",
          "code": "class Solution {\n  List<int> dailyTemperatures(List<int> temperatures) {\n    \n  }\n}"
        },
        {
          "langSlug": "golang",
          "code": "func dailyTemperatures(temperatures []int) []int {\n    \n}"
        },
        {
          "langSlug": "ruby",
          "code": "# @param {Integer[]} temperatures\n# @return {Integer[]}\ndef daily_temperatures(temperatures)\n    \nend"
        },
        {
          "langSlug": "scala",
          "code": "object Solution {\n    def dailyTemperatures(temperatures: Array[Int]): Array[Int] = {\n        \n    }\n}"
        },
        {
          "langSlug": "rust",
          "code": "impl Solution {\n    pub fn daily_temperatures(temperatures: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
        },
        {
          "langSlug": "racket",
          "code": "(define/contract (daily-temperatures temperatures)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"
        },
        {
          "langSlug": "erlang",
          "code": "-spec daily_temperatures(Temperatures :: [integer()]) -> [integer()].\ndaily_temperatures(Temperatures) ->\n  ."
        },
        {
          "langSlug": "elixir",
          "code": "defmodule Solution do\n  @spec daily_temperatures(temperatures :: [integer]) :: [integer]\n  def daily_temperatures(temperatures) do\n    \n  end\nend"
        }
      ],
      "difficulty": "Medium",
      "content": "<p>Given an array of integers <code>temperatures</code> represents the daily temperatures, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is the number of days you have to wait after the</em> <code>i<sup>th</sup></code> <em>day to get a warmer temperature</em>. If there is no future day for which this is possible, keep <code>answer[i] == 0</code> instead.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> temperatures = [73,74,75,71,69,72,76,73]\n<strong>Output:</strong> [1,1,4,2,1,1,0,0]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> temperatures = [30,40,50,60]\n<strong>Output:</strong> [1,1,1,0]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> temperatures = [30,60,90]\n<strong>Output:</strong> [1,1,0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;temperatures.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>30 &lt;=&nbsp;temperatures[i] &lt;= 100</code></li>\n</ul>\n",
      "exampleTestcaseList": [
        "[73,74,75,71,69,72,76,73]",
        "[30,40,50,60]",
        "[30,60,90]"
      ],
      "metaData": {
        "name": "dailyTemperatures",
        "params": [{ "name": "temperatures", "type": "integer[]" }],
        "return": { "type": "integer[]" }
      }
    }
  }
}
