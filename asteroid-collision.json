{"data": {"question": {"questionId": "735", "titleSlug": "asteroid-collision", "title": "Asteroid Collision", "topicTags": [{"name": "Array"}, {"name": "Stack"}, {"name": "Simulation"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> asteroidCollision(vector<int>& asteroids) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int[] asteroidCollision(int[] asteroids) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def asteroidCollision(self, asteroids):\n        \"\"\"\n        :type asteroids: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def asteroidCollision(self, asteroids: List[int]) -> List[int]:\n        "}, {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* asteroidCollision(int* asteroids, int asteroidsSize, int* returnSize) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int[] AsteroidCollision(int[] asteroids) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number[]} asteroids\n * @return {number[]}\n */\nvar asteroidCollision = function(asteroids) {\n    \n};"}, {"langSlug": "typescript", "code": "function asteroidCollision(asteroids: number[]): number[] {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $asteroids\n     * @return Integer[]\n     */\n    function asteroidCollision($asteroids) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func asteroidCollision(_ asteroids: [Int]) -> [Int] {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun asteroidCollision(asteroids: IntArray): IntArray {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  List<int> asteroidCollision(List<int> asteroids) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func asteroidCollision(asteroids []int) []int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer[]} asteroids\n# @return {Integer[]}\ndef asteroid_collision(asteroids)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def asteroidCollision(asteroids: Array[Int]): Array[Int] = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn asteroid_collision(asteroids: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (asteroid-collision asteroids)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"}, {"langSlug": "erlang", "code": "-spec asteroid_collision(Asteroids :: [integer()]) -> [integer()].\nasteroid_collision(Asteroids) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec asteroid_collision(asteroids :: [integer]) :: [integer]\n  def asteroid_collision(asteroids) do\n    \n  end\nend"}], "difficulty": "Medium", "content": "<p>We are given an array <code>asteroids</code> of integers representing asteroids in a row.</p>\n\n<p>For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.</p>\n\n<p>Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [5,10,-5]\n<strong>Output:</strong> [5,10]\n<strong>Explanation:</strong> The 10 and -5 collide resulting in 10. The 5 and 10 never collide.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [8,-8]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The 8 and -8 collide exploding each other.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> asteroids = [10,2,-5]\n<strong>Output:</strong> [10]\n<strong>Explanation:</strong> The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= asteroids.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= asteroids[i] &lt;= 1000</code></li>\n\t<li><code>asteroids[i] != 0</code></li>\n</ul>\n", "exampleTestcaseList": ["[5,10,-5]", "[8,-8]", "[10,2,-5]"], "metaData": {"name": "asteroidCollision", "params": [{"name": "asteroids", "type": "integer[]"}], "return": {"type": "integer[]"}}}}}