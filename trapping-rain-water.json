{"data": {"question": {"questionId": "42", "titleSlug": "trapping-rain-water", "title": "Trapping Rain Water", "topicTags": [{"name": "Array"}, {"name": "Two Pointers"}, {"name": "Dynamic Programming"}, {"name": "Stack"}, {"name": "Monotonic Stack"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    int trap(vector<int>& height) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int trap(int[] height) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        "}, {"langSlug": "c", "code": "int trap(int* height, int heightSize) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int Trap(int[] height) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function(height) {\n    \n};"}, {"langSlug": "typescript", "code": "function trap(height: number[]): number {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function trap($height) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func trap(_ height: [Int]) -> Int {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun trap(height: IntArray): Int {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  int trap(List<int> height) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func trap(height []int) int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer[]} height\n# @return {Integer}\ndef trap(height)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def trap(height: Array[Int]): Int = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn trap(height: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (trap height)\n  (-> (listof exact-integer?) exact-integer?)\n  )"}, {"langSlug": "erlang", "code": "-spec trap(Height :: [integer()]) -> integer().\ntrap(Height) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec trap(height :: [integer]) :: integer\n  def trap(height) do\n    \n  end\nend"}], "difficulty": "Hard", "content": "<p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png\" style=\"width: 412px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> height = [0,1,0,2,1,0,1,3,2,1,2,1]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [4,2,0,3,2,5]\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "exampleTestcaseList": ["[0,1,0,2,1,0,1,3,2,1,2,1]", "[4,2,0,3,2,5]"], "metaData": {"name": "trap", "params": [{"name": "height", "type": "integer[]"}], "return": {"type": "integer"}}}}}