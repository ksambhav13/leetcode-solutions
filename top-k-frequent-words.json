{"data": {"question": {"questionId": "692", "titleSlug": "top-k-frequent-words", "title": "Top K Frequent Words", "topicTags": [{"name": "Hash Table"}, {"name": "String"}, {"name": "Trie"}, {"name": "Sorting"}, {"name": "Heap (Priority Queue)"}, {"name": "Bucket Sort"}, {"name": "Counting"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> topKFrequent(vector<string>& words, int k) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public List<String> topKFrequent(String[] words, int k) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def topKFrequent(self, words, k):\n        \"\"\"\n        :type words: List[str]\n        :type k: int\n        :rtype: List[str]\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def topKFrequent(self, words: List[str], k: int) -> List[str]:\n        "}, {"langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** topKFrequent(char** words, int wordsSize, int k, int* returnSize) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public IList<string> TopKFrequent(string[] words, int k) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {string[]} words\n * @param {number} k\n * @return {string[]}\n */\nvar topKFrequent = function(words, k) {\n    \n};"}, {"langSlug": "typescript", "code": "function topKFrequent(words: string[], k: number): string[] {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @param Integer $k\n     * @return String[]\n     */\n    function topKFrequent($words, $k) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func topKFrequent(_ words: [String], _ k: Int) -> [String] {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun topKFrequent(words: Array<String>, k: Int): List<String> {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  List<String> topKFrequent(List<String> words, int k) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func topKFrequent(words []string, k int) []string {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {String[]} words\n# @param {Integer} k\n# @return {String[]}\ndef top_k_frequent(words, k)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def topKFrequent(words: Array[String], k: Int): List[String] = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn top_k_frequent(words: Vec<String>, k: i32) -> Vec<String> {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (top-k-frequent words k)\n  (-> (listof string?) exact-integer? (listof string?))\n  )"}, {"langSlug": "erlang", "code": "-spec top_k_frequent(Words :: [unicode:unicode_binary()], K :: integer()) -> [unicode:unicode_binary()].\ntop_k_frequent(Words, K) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec top_k_frequent(words :: [String.t], k :: integer) :: [String.t]\n  def top_k_frequent(words, k) do\n    \n  end\nend"}], "difficulty": "Medium", "content": "<p>Given an array of strings <code>words</code> and an integer <code>k</code>, return <em>the </em><code>k</code><em> most frequent strings</em>.</p>\n\n<p>Return the answer <strong>sorted</strong> by <strong>the frequency</strong> from highest to lowest. Sort the words with the same frequency by their <strong>lexicographical order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;i&quot;,&quot;love&quot;,&quot;leetcode&quot;,&quot;i&quot;,&quot;love&quot;,&quot;coding&quot;], k = 2\n<strong>Output:</strong> [&quot;i&quot;,&quot;love&quot;]\n<strong>Explanation:</strong> &quot;i&quot; and &quot;love&quot; are the two most frequent words.\nNote that &quot;i&quot; comes before &quot;love&quot; due to a lower alphabetical order.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;the&quot;,&quot;day&quot;,&quot;is&quot;,&quot;sunny&quot;,&quot;the&quot;,&quot;the&quot;,&quot;the&quot;,&quot;sunny&quot;,&quot;is&quot;,&quot;is&quot;], k = 4\n<strong>Output:</strong> [&quot;the&quot;,&quot;is&quot;,&quot;sunny&quot;,&quot;day&quot;]\n<strong>Explanation:</strong> &quot;the&quot;, &quot;is&quot;, &quot;sunny&quot; and &quot;day&quot; are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 500</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n\t<li><code>k</code> is in the range <code>[1, The number of <strong>unique</strong> words[i]]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong> Could you solve it in <code>O(n log(k))</code> time and <code>O(n)</code> extra space?</p>\n", "exampleTestcaseList": ["[\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"]\n2", "[\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\",\"sunny\",\"is\",\"is\"]\n4"], "metaData": {"name": "topKFrequent", "params": [{"name": "words", "type": "string[]"}, {"name": "k", "type": "integer"}], "return": {"type": "list<string>"}}}}}