{"data": {"question": {"questionId": "9", "titleSlug": "palindrome-number", "title": "Palindrome Number", "topicTags": [{"name": "Math"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool isPalindrome(int x) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public boolean isPalindrome(int x) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        "}, {"langSlug": "c", "code": "bool isPalindrome(int x) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public bool IsPalindrome(int x) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n    \n};"}, {"langSlug": "typescript", "code": "function isPalindrome(x: number): boolean {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Boolean\n     */\n    function isPalindrome($x) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func isPalindrome(_ x: Int) -> Bool {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun isPalindrome(x: Int): Boolean {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  bool isPalindrome(int x) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func isPalindrome(x int) bool {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer} x\n# @return {Boolean}\ndef is_palindrome(x)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def isPalindrome(x: Int): Boolean = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn is_palindrome(x: i32) -> bool {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (is-palindrome x)\n  (-> exact-integer? boolean?)\n  )"}, {"langSlug": "erlang", "code": "-spec is_palindrome(X :: integer()) -> boolean().\nis_palindrome(X) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec is_palindrome(x :: integer) :: boolean\n  def is_palindrome(x) do\n    \n  end\nend"}], "difficulty": "Easy", "content": "<p>Given an integer <code>x</code>, return <code>true</code><em> if </em><code>x</code><em> is a </em><span data-keyword=\"palindrome-integer\"><em><strong>palindrome</strong></em></span><em>, and </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 121\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 121 reads as 121 from left to right and from right to left.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = -121\n<strong>Output:</strong> false\n<strong>Explanation:</strong> From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 10\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Reads 01 from right to left. Therefore it is not a palindrome.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup>&nbsp;&lt;= x &lt;= 2<sup>31</sup>&nbsp;- 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it without converting the integer to a string?", "exampleTestcaseList": ["121", "-121", "10"], "metaData": {"name": "isPalindrome", "params": [{"name": "x", "type": "integer"}], "return": {"type": "boolean"}}}}}