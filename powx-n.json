{"data": {"question": {"questionId": "50", "titleSlug": "powx-n", "title": "Pow(x, n)", "topicTags": [{"name": "Math"}, {"name": "Recursion"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    double myPow(double x, int n) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public double myPow(double x, int n) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def myPow(self, x, n):\n        \"\"\"\n        :type x: float\n        :type n: int\n        :rtype: float\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        "}, {"langSlug": "c", "code": "double myPow(double x, int n) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public double MyPow(double x, int n) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number} x\n * @param {number} n\n * @return {number}\n */\nvar myPow = function(x, n) {\n    \n};"}, {"langSlug": "typescript", "code": "function myPow(x: number, n: number): number {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Float $x\n     * @param Integer $n\n     * @return Float\n     */\n    function myPow($x, $n) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func myPow(_ x: Double, _ n: Int) -> Double {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun myPow(x: Double, n: Int): Double {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  double myPow(double x, int n) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func myPow(x float64, n int) float64 {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Float} x\n# @param {Integer} n\n# @return {Float}\ndef my_pow(x, n)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def myPow(x: Double, n: Int): Double = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn my_pow(x: f64, n: i32) -> f64 {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (my-pow x n)\n  (-> flonum? exact-integer? flonum?)\n  )"}, {"langSlug": "erlang", "code": "-spec my_pow(X :: float(), N :: integer()) -> float().\nmy_pow(X, N) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec my_pow(x :: float, n :: integer) :: float\n  def my_pow(x, n) do\n    \n  end\nend"}], "difficulty": "Medium", "content": "<p>Implement <a href=\"http://www.cplusplus.com/reference/valarray/pow/\" target=\"_blank\">pow(x, n)</a>, which calculates <code>x</code> raised to the power <code>n</code> (i.e., <code>x<sup>n</sup></code>).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.00000, n = 10\n<strong>Output:</strong> 1024.00000\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.10000, n = 3\n<strong>Output:</strong> 9.26100\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.00000, n = -2\n<strong>Output:</strong> 0.25000\n<strong>Explanation:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-100.0 &lt; x &lt; 100.0</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup>-1</code></li>\n\t<li><code>n</code> is an integer.</li>\n\t<li>Either <code>x</code> is not zero or <code>n &gt; 0</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sup>n</sup> &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "exampleTestcaseList": ["2.00000\n10", "2.10000\n3", "2.00000\n-2"], "metaData": {"name": "myPow", "params": [{"name": "x", "type": "double"}, {"name": "n", "type": "integer"}], "return": {"type": "double"}}}}}