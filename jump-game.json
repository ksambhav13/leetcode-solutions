{"data": {"question": {"questionId": "55", "titleSlug": "jump-game", "title": "Jump Game", "topicTags": [{"name": "Array"}, {"name": "Dynamic Programming"}, {"name": "Greedy"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    bool canJump(vector<int>& nums) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public boolean canJump(int[] nums) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        "}, {"langSlug": "c", "code": "bool canJump(int* nums, int numsSize) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public bool CanJump(int[] nums) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canJump = function(nums) {\n    \n};"}, {"langSlug": "typescript", "code": "function canJump(nums: number[]): boolean {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canJump($nums) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func canJump(_ nums: [Int]) -> Bool {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun canJump(nums: IntArray): Boolean {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  bool canJump(List<int> nums) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func canJump(nums []int) bool {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef can_jump(nums)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def canJump(nums: Array[Int]): Boolean = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn can_jump(nums: Vec<i32>) -> bool {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (can-jump nums)\n  (-> (listof exact-integer?) boolean?)\n  )"}, {"langSlug": "erlang", "code": "-spec can_jump(Nums :: [integer()]) -> boolean().\ncan_jump(Nums) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec can_jump(nums :: [integer]) :: boolean\n  def can_jump(nums) do\n    \n  end\nend"}], "difficulty": "Medium", "content": "<p>You are given an integer array <code>nums</code>. You are initially positioned at the array&#39;s <strong>first index</strong>, and each element in the array represents your maximum jump length at that position.</p>\n\n<p>Return <code>true</code><em> if you can reach the last index, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,1,1,4]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Jump 1 step from index 0 to 1, then 3 steps to the last index.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,1,0,4]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n", "exampleTestcaseList": ["[2,3,1,1,4]", "[3,2,1,0,4]"], "metaData": {"name": "canJump", "params": [{"name": "nums", "type": "integer[]"}], "return": {"type": "boolean"}}}}}