{"data": {"question": {"questionId": "329", "titleSlug": "longest-increasing-path-in-a-matrix", "title": "Longest Increasing Path in a Matrix", "topicTags": [{"name": "Array"}, {"name": "Dynamic Programming"}, {"name": "Depth-First Search"}, {"name": "Breadth-First Search"}, {"name": "Graph"}, {"name": "Topological Sort"}, {"name": "Memoization"}, {"name": "Matrix"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int longestIncreasingPath(int[][] matrix) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        "}, {"langSlug": "c", "code": "int longestIncreasingPath(int** matrix, int matrixSize, int* matrixColSize) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int LongestIncreasingPath(int[][] matrix) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n * @return {number}\n */\nvar longestIncreasingPath = function(matrix) {\n    \n};"}, {"langSlug": "typescript", "code": "function longestIncreasingPath(matrix: number[][]): number {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer\n     */\n    function longestIncreasingPath($matrix) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func longestIncreasingPath(_ matrix: [[Int]]) -> Int {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun longestIncreasingPath(matrix: Array<IntArray>): Int {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  int longestIncreasingPath(List<List<int>> matrix) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func longestIncreasingPath(matrix [][]int) int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer[][]} matrix\n# @return {Integer}\ndef longest_increasing_path(matrix)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def longestIncreasingPath(matrix: Array[Array[Int]]): Int = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_increasing_path(matrix: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (longest-increasing-path matrix)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"}, {"langSlug": "erlang", "code": "-spec longest_increasing_path(Matrix :: [[integer()]]) -> integer().\nlongest_increasing_path(Matrix) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_increasing_path(matrix :: [[integer]]) :: integer\n  def longest_increasing_path(matrix) do\n    \n  end\nend"}], "difficulty": "Hard", "content": "<p>Given an <code>m x n</code> integers <code>matrix</code>, return <em>the length of the longest increasing path in </em><code>matrix</code>.</p>\n\n<p>From each cell, you can either move in four directions: left, right, up, or down. You <strong>may not</strong> move <strong>diagonally</strong> or move <strong>outside the boundary</strong> (i.e., wrap-around is not allowed).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/05/grid1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[9,9,4],[6,6,8],[2,1,1]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest increasing path is <code>[1, 2, 6, 9]</code>.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/27/tmp-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[3,4,5],[3,2,6],[2,2,1]]\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>The longest increasing path is <code>[3, 4, 5, 6]</code>. Moving diagonally is not allowed.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>0 &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n", "exampleTestcaseList": ["[[9,9,4],[6,6,8],[2,1,1]]", "[[3,4,5],[3,2,6],[2,2,1]]", "[[1]]"], "metaData": {"name": "longestIncreasingPath", "params": [{"name": "matrix", "type": "integer[][]"}], "return": {"type": "integer"}}}}}