{"data": {"question": {"questionId": "5", "titleSlug": "longest-palindromic-substring", "title": "Longest Palindromic Substring", "topicTags": [{"name": "Two Pointers"}, {"name": "String"}, {"name": "Dynamic Programming"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    string longestPalindrome(string s) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public String longestPalindrome(String s) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        "}, {"langSlug": "c", "code": "char* longestPalindrome(char* s) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public string LongestPalindrome(string s) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar longestPalindrome = function(s) {\n    \n};"}, {"langSlug": "typescript", "code": "function longestPalindrome(s: string): string {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function longestPalindrome($s) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func longestPalindrome(_ s: String) -> String {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun longestPalindrome(s: String): String {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  String longestPalindrome(String s) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func longestPalindrome(s string) string {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {String} s\n# @return {String}\ndef longest_palindrome(s)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def longestPalindrome(s: String): String = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn longest_palindrome(s: String) -> String {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (longest-palindrome s)\n  (-> string? string?)\n  )"}, {"langSlug": "erlang", "code": "-spec longest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nlongest_palindrome(S) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec longest_palindrome(s :: String.t) :: String.t\n  def longest_palindrome(s) do\n    \n  end\nend"}], "difficulty": "Medium", "content": "<p>Given a string <code>s</code>, return <em>the longest</em> <span data-keyword=\"palindromic-string\"><em>palindromic</em></span> <span data-keyword=\"substring-nonempty\"><em>substring</em></span> in <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;babad&quot;\n<strong>Output:</strong> &quot;bab&quot;\n<strong>Explanation:</strong> &quot;aba&quot; is also a valid answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbbd&quot;\n<strong>Output:</strong> &quot;bb&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consist of only digits and English letters.</li>\n</ul>\n", "exampleTestcaseList": ["\"babad\"", "\"cbbd\""], "metaData": {"name": "longestPalindrome", "params": [{"name": "s", "type": "string"}], "return": {"type": "string"}}}}}