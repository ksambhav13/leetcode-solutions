{"data": {"question": {"questionId": "221", "titleSlug": "maximal-square", "title": "Maximal Square", "topicTags": [{"name": "Array"}, {"name": "Dynamic Programming"}, {"name": "Matrix"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    int maximalSquare(vector<vector<char>>& matrix) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int maximalSquare(char[][] matrix) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def maximalSquare(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        "}, {"langSlug": "c", "code": "int maximalSquare(char** matrix, int matrixSize, int* matrixColSize) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int MaximalSquare(char[][] matrix) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {character[][]} matrix\n * @return {number}\n */\nvar maximalSquare = function(matrix) {\n    \n};"}, {"langSlug": "typescript", "code": "function maximalSquare(matrix: string[][]): number {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[][] $matrix\n     * @return Integer\n     */\n    function maximalSquare($matrix) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func maximalSquare(_ matrix: [[Character]]) -> Int {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun maximalSquare(matrix: Array<CharArray>): Int {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  int maximalSquare(List<List<String>> matrix) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func maximalSquare(matrix [][]byte) int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Character[][]} matrix\n# @return {Integer}\ndef maximal_square(matrix)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def maximalSquare(matrix: Array[Array[Char]]): Int = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn maximal_square(matrix: Vec<Vec<char>>) -> i32 {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (maximal-square matrix)\n  (-> (listof (listof char?)) exact-integer?)\n  )"}, {"langSlug": "erlang", "code": "-spec maximal_square(Matrix :: [[char()]]) -> integer().\nmaximal_square(Matrix) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec maximal_square(matrix :: [[char]]) :: integer\n  def maximal_square(matrix) do\n    \n  end\nend"}], "difficulty": "Medium", "content": "<p>Given an <code>m x n</code> binary <code>matrix</code> filled with <code>0</code>&#39;s and <code>1</code>&#39;s, <em>find the largest square containing only</em> <code>1</code>&#39;s <em>and return its area</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg\" style=\"width: 400px; height: 319px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg\" style=\"width: 165px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[&quot;0&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;]]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[&quot;0&quot;]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>matrix[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n", "exampleTestcaseList": ["[[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]", "[[\"0\",\"1\"],[\"1\",\"0\"]]", "[[\"0\"]]"], "metaData": {"name": "maximalSquare", "params": [{"name": "matrix", "type": "character[][]"}], "return": {"type": "integer"}}}}}