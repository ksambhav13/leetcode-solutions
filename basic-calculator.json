{"data": {"question": {"questionId": "224", "titleSlug": "basic-calculator", "title": "Basic Calculator", "topicTags": [{"name": "Math"}, {"name": "String"}, {"name": "Stack"}, {"name": "Recursion"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    int calculate(string s) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public int calculate(String s) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def calculate(self, s: str) -> int:\n        "}, {"langSlug": "c", "code": "int calculate(char* s) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public int Calculate(string s) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar calculate = function(s) {\n    \n};"}, {"langSlug": "typescript", "code": "function calculate(s: string): number {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function calculate($s) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func calculate(_ s: String) -> Int {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun calculate(s: String): Int {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  int calculate(String s) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func calculate(s string) int {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {String} s\n# @return {Integer}\ndef calculate(s)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def calculate(s: String): Int = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn calculate(s: String) -> i32 {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (calculate s)\n  (-> string? exact-integer?)\n  )"}, {"langSlug": "erlang", "code": "-spec calculate(S :: unicode:unicode_binary()) -> integer().\ncalculate(S) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec calculate(s :: String.t) :: integer\n  def calculate(s) do\n    \n  end\nend"}], "difficulty": "Hard", "content": "<p>Given a string <code>s</code> representing a valid expression, implement a basic calculator to evaluate it, and return <em>the result of the evaluation</em>.</p>\n\n<p><strong>Note:</strong> You are <strong>not</strong> allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1 + 1&quot;\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot; 2-1 + 2 &quot;\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(1+(4+5+2)-3)+(6+8)&quot;\n<strong>Output:</strong> 23\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of digits, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, and <code>&#39; &#39;</code>.</li>\n\t<li><code>s</code> represents a valid expression.</li>\n\t<li><code>&#39;+&#39;</code> is <strong>not</strong> used as a unary operation (i.e., <code>&quot;+1&quot;</code> and <code>&quot;+(2 + 3)&quot;</code> is invalid).</li>\n\t<li><code>&#39;-&#39;</code> could be used as a unary operation (i.e., <code>&quot;-1&quot;</code> and <code>&quot;-(2 + 3)&quot;</code> is valid).</li>\n\t<li>There will be no two consecutive operators in the input.</li>\n\t<li>Every number and running calculation will fit in a signed 32-bit integer.</li>\n</ul>\n", "exampleTestcaseList": ["\"1 + 1\"", "\" 2-1 + 2 \"", "\"(1+(4+5+2)-3)+(6+8)\""], "metaData": {"name": "calculate", "params": [{"name": "s", "type": "string"}], "return": {"type": "integer"}}}}}