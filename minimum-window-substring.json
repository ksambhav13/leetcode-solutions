{"data": {"question": {"questionId": "76", "titleSlug": "minimum-window-substring", "title": "Minimum Window Substring", "topicTags": [{"name": "Hash Table"}, {"name": "String"}, {"name": "Sliding Window"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    string minWindow(string s, string t) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public String minWindow(String s, String t) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        "}, {"langSlug": "c", "code": "char* minWindow(char* s, char* t) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public string MinWindow(string s, string t) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {string} s\n * @param {string} t\n * @return {string}\n */\nvar minWindow = function(s, t) {\n    \n};"}, {"langSlug": "typescript", "code": "function minWindow(s: string, t: string): string {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return String\n     */\n    function minWindow($s, $t) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func minWindow(_ s: String, _ t: String) -> String {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun minWindow(s: String, t: String): String {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  String minWindow(String s, String t) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func minWindow(s string, t string) string {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {String} s\n# @param {String} t\n# @return {String}\ndef min_window(s, t)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def minWindow(s: String, t: String): String = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn min_window(s: String, t: String) -> String {\n        \n    }\n}"}, {"langSlug": "racket", "code": "(define/contract (min-window s t)\n  (-> string? string? string?)\n  )"}, {"langSlug": "erlang", "code": "-spec min_window(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmin_window(S, T) ->\n  ."}, {"langSlug": "elixir", "code": "defmodule Solution do\n  @spec min_window(s :: String.t, t :: String.t) :: String.t\n  def min_window(s, t) do\n    \n  end\nend"}], "difficulty": "Hard", "content": "<p>Given two strings <code>s</code> and <code>t</code> of lengths <code>m</code> and <code>n</code> respectively, return <em>the <strong>minimum window</strong></em> <span data-keyword=\"substring-nonempty\"><strong><em>substring</em></strong></span><em> of </em><code>s</code><em> such that every character in </em><code>t</code><em> (<strong>including duplicates</strong>) is included in the window</em>. If there is no such substring, return <em>the empty string </em><code>&quot;&quot;</code>.</p>\n\n<p>The testcases will be generated such that the answer is <strong>unique</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;\n<strong>Output:</strong> &quot;BANC&quot;\n<strong>Explanation:</strong> The minimum window substring &quot;BANC&quot; includes &#39;A&#39;, &#39;B&#39;, and &#39;C&#39; from string t.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;a&quot;\n<strong>Output:</strong> &quot;a&quot;\n<strong>Explanation:</strong> The entire string s is the minimum window.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;aa&quot;\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> Both &#39;a&#39;s from t must be included in the window.\nSince the largest window of s only has one &#39;a&#39;, return empty string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == s.length</code></li>\n\t<li><code>n == t.length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of uppercase and lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you find an algorithm that runs in <code>O(m + n)</code> time?</p>\n", "exampleTestcaseList": ["\"ADOBECODEBANC\"\n\"ABC\"", "\"a\"\n\"a\"", "\"a\"\n\"aa\""], "metaData": {"name": "minWindow", "params": [{"name": "s", "type": "string"}, {"name": "t", "type": "string"}], "return": {"type": "string"}}}}}