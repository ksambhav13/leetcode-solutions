{"data": {"question": {"questionId": "48", "titleSlug": "rotate-image", "title": "Rotate Image", "topicTags": [{"name": "Array"}, {"name": "Math"}, {"name": "Matrix"}], "codeSnippets": [{"langSlug": "cpp", "code": "class Solution {\npublic:\n    void rotate(vector<vector<int>>& matrix) {\n        \n    }\n};"}, {"langSlug": "java", "code": "class Solution {\n    public void rotate(int[][] matrix) {\n        \n    }\n}"}, {"langSlug": "python", "code": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        "}, {"langSlug": "python3", "code": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        "}, {"langSlug": "c", "code": "void rotate(int** matrix, int matrixSize, int* matrixColSize) {\n    \n}"}, {"langSlug": "csharp", "code": "public class Solution {\n    public void Rotate(int[][] matrix) {\n        \n    }\n}"}, {"langSlug": "javascript", "code": "/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar rotate = function(matrix) {\n    \n};"}, {"langSlug": "typescript", "code": "/**\n Do not return anything, modify matrix in-place instead.\n */\nfunction rotate(matrix: number[][]): void {\n    \n};"}, {"langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return NULL\n     */\n    function rotate(&$matrix) {\n        \n    }\n}"}, {"langSlug": "swift", "code": "class Solution {\n    func rotate(_ matrix: inout [[Int]]) {\n        \n    }\n}"}, {"langSlug": "kotlin", "code": "class Solution {\n    fun rotate(matrix: Array<IntArray>): Unit {\n        \n    }\n}"}, {"langSlug": "dart", "code": "class Solution {\n  void rotate(List<List<int>> matrix) {\n    \n  }\n}"}, {"langSlug": "golang", "code": "func rotate(matrix [][]int)  {\n    \n}"}, {"langSlug": "ruby", "code": "# @param {Integer[][]} matrix\n# @return {Void} Do not return anything, modify matrix in-place instead.\ndef rotate(matrix)\n    \nend"}, {"langSlug": "scala", "code": "object Solution {\n    def rotate(matrix: Array[Array[Int]]): Unit = {\n        \n    }\n}"}, {"langSlug": "rust", "code": "impl Solution {\n    pub fn rotate(matrix: &mut Vec<Vec<i32>>) {\n        \n    }\n}"}], "difficulty": "Medium", "content": "<p>You are given an <code>n x n</code> 2D <code>matrix</code> representing an image, rotate the image by <strong>90</strong> degrees (clockwise).</p>\n\n<p>You have to rotate the image <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a>, which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg\" style=\"width: 500px; height: 188px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong> [[7,4,1],[8,5,2],[9,6,3]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg\" style=\"width: 500px; height: 201px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n<strong>Output:</strong> [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == matrix.length == matrix[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n\t<li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li>\n</ul>\n", "exampleTestcaseList": ["[[1,2,3],[4,5,6],[7,8,9]]", "[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]"], "metaData": {"name": "rotate", "params": [{"name": "matrix", "type": "integer[][]"}], "return": {"type": "void"}, "output": {"paramindex": 0}}}}}